/*   Copyright (C) 2016  Luke Melaia
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'java'
apply plugin: 'application'

test.testLogging.showStandardStreams = true
test.testLogging.exceptionFormat = 'full'

mainClassName = 'org.lmelaia.iseries.launcher.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.lmelaia.iseries.launcher.Main'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    
    compile project(path: ':I-Series-Common')
    //runtime project(path: ':Common')
    //testCompile project(path: ':Common')
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect {
                    "libs/" + it.getName()
                }.join(' '),
                'Main-Class': 'org.lmelaia.iseries.launcher.Main'
        )
    }
}

/**
 * Copies over the files in the buildOutput directory to the runtime directory
 * before running the launcher. This gives the launcher access to the complete
 * application(excluding the built launcher) in order to test it properly.
 *
 * These files are deleted after the run task is executed.
 */
task copyOverBuild(type: Copy){
    from('../buildOutput')
    into('../Launcher')
}

/**
 * Deletes the buildOutput directory content from the runtime directory.
 */
task deleteBuildFrom(type: Delete){
    for(File f : new File(new File(System.getProperty("user.dir")).getAbsolutePath() + "/buildOutput").listFiles()){
        delete f.getName()
    }
}

/**
 * Copies the gradle dependencies to a lib folder
 * inside the project folder.
 */
task copyDependencies(type: Copy){
    into "$buildDir/libs/libs"
    from configurations.runtime
}

run.dependsOn(copyOverBuild)
run.dependsOn(copyDependencies)
run.finalizedBy(deleteBuildFrom)
