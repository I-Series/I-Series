import org.apache.commons.io.FileUtils

/*   Copyright (C) 2016  Luke Melaia
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

applicationDefaultJvmArgs = ["-Dprism.vsync=false"]

mainClassName = "org.lmelaia.iseries.Main"

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.lmelaia.iseries.Main'
}

repositories {
    mavenCentral()    
}

buildscript {
    repositories {
        mavenCentral();
    }

    dependencies{
        classpath group: 'commons-io', name: 'commons-io', version: '2.4'
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    
    compile project(path: ':I-Series-Common')
    //runtime project(path: ':Common')
    //testCompile project(path: ':Common')
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect {
                "libs/" + it.getName() 
            }.join(' '),
            'Main-Class': 'org.lmelaia.iseries.Main'
        )
    }
}

subprojects {
    apply plugin: 'java'
}

configurations.compile.each {
    println "compile: $it"
} 

/**
 * Produces a full distributable version of the application.
 *
 * A full build is considered a build of all the projects,
 * subprojects AND a build of the executables, installers
 * and what ever else needs doing. 
 * 
 * This task is NOT called from any other task, rather it
 * must be called from the command line(o.e). This task
 * is run when wanting to do a full build (defined above).
 * 
 * The build task is a dependency of this task to ensure:
 * all the sources have been build before this task is run.
 * Which ensures the build files (e.g. jar files) are
 * up-to-date before trying to use them (which is done
 * in a full build).
 * 
 * This task does NOTHING other than call the method
 * org.lmelaia.iseries.build.BuildConfiguration:fullBuild()
 * which does all the work.
 *
 * This is used to bypass the build source main method
 * as the build source main method is called when running
 * the project, rather than building it.
 */
task fullBuild << {
    println('Beginning full build...')
}

/**
 * Runs the application as though it was run
 * by the user from a full working envrionment.
 *
 * Basically does a full build, copies the build
 * to a run folder and runs the launcher. This
 * allows running the full application from a
 * dev environment.
 */
task trueRun << {
    println("Beginning true run")

    File rundir = new File(System.getProperty("user.dir") + "/run");
    rundir.mkdir();

    File source = new File(System.getProperty("user.dir") + "/buildOutput");
    File dest = rundir;

    try {
        FileUtils.copyDirectory(source, dest);
    } catch (IOException e) {
        println("Could not copy to run directory: " + e.getMessage());
    }
}

task cleanTrueRun << {
    FileUtils.deleteDirectory(new File(System.getProperty("user.dir") + "/run"));
}

task runLauncher << {

    String command = "java -jar " +
            new File(System.getProperty("user.dir")).getAbsolutePath() +
            File.separator + "run" +
            File.separator + "I-Series.jar"

    System.out.println("Executing launcher with arguments: " + command)

    Process appProcess = Runtime.getRuntime().exec(command, null, new File(new File(
            System.getProperty("user.dir")).getAbsolutePath() +
            File.separator + "run"))

    Thread t = new Thread(new Runnable() {
        @Override
        void run() {
            String line
            BufferedReader inn = new BufferedReader(
                    new InputStreamReader(appProcess.getInputStream()))

            try {
                while ((line = inn.readLine()) != null) {
                    System.out.println(line)
                }
            } catch (ignored) {
            }

        }
    }, "Process output printer")
    t.setDaemon(true)
    t.start()

    System.out.println("Launcher exit code: " + appProcess.waitFor())
}

/**
 * Copies the root projects dependencies into build/lib/lib 
 */
task copyDependencies(type: Copy){
    into "$buildDir/libs/libs"
    from configurations.runtime
}

//Ensures all files (e.g. jar files) are up-to-date before
//beginning a full build.
build.finalizedBy(copyDependencies)
fullBuild.dependsOn("I-Series-Common:build")
fullBuild.dependsOn("Launcher:build")
fullBuild.dependsOn(build)
fullBuild.finalizedBy("BuildSource:run")

trueRun.dependsOn(fullBuild)
trueRun.finalizedBy(runLauncher)

cleanTrueRun.finalizedBy(trueRun)