/*   Copyright (C) 2016  Luke Melaia
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.lmelaia.iseries.build.BuildConfiguration

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

applicationDefaultJvmArgs = ["-Dprism.vsync=false"]

mainClassName = "org.lmelaia.iseries.Main"

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.lmelaia.iseries.Main'
}

/*
 * When called, this task runs the static method run()
 * inside the BuildConfiguration class, contained in the BuildSrc
 * subproject.
 * 
 * This task is called BEFORE running the root project.
 */
task buildsrcRun << {
    BuildConfiguration.run()
}

/*
 * When called, this task runs the static method build()
 * inside the BuildConfiguration class, contained in the BuildSrc
 * subproject.
 * 
 * This task is called AFTER building the root project.
 */
task buildsrcBuild << {
    BuildConfiguration.build()
}

repositories {
    mavenCentral()    
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { "libs/" + it.getName() }.join(' '), 
            'Main-Class': 'org.lmelaia.iseries.Main'
        )
    }
}

/*
 * Runs the task buildsrcBuild AFTER building the root project.
 */
build.finalizedBy(buildsrcBuild)
/*
 * Runs the task buildsrcRun BEFORE running the root project.
 */
run.dependsOn(buildsrcRun)